////////////////////////////////  Divisors  //////////////////////////////////////////

vector<ll> Get_Divisors(ll num) { // O(sqrt(n)   

    vector<ll> divisors;
    ll i;
    for (i = 1; i * i < num; i++) {
        if (!(num % i)) {
            divisors.push_back(i);
            divisors.push_back(num / i);
        }
    }
    if((i * i) == num) divisors.push_back(i);
    return divisors;
}

ll Count_Divisors(ll num) {

    ll i, counter = 0;
    for (i = 1; i * i < num; i++) {
        if (!(num % i)) counter += 2;
    }
    if ((i * i) == num) counter++;

    return counter;
}

ll Sum_Of_Divisors(ll num) {
    ll total = 1;

    for (int i = 2; (ll)i * i <= num; i++) {
        if (num % i == 0) {
            int e = 0;
            do {
                e++;
                num /= i;
            } while (num % i == 0);

            ll sum = 0, pow = 1;
            do {
                sum += pow;
                pow *= i;
            } while (e-- > 0);
            total *= sum;
        }
    }
    if (num > 1) {
        total *= (1 + num);
    }
    return total;
}

////////////////////////////////  Primes  //////////////////////////////////////////

bool Is_Prime(int n) {

    if(n == 2) return true;
    if(n < 2 || n % 2 == 0) return false;

    for (int i = 3; i * i <= n; i += 2) {
        if(n % i == 0) return false;
    }
    return true;
}

vector<bool> Prime_Range_Sieve(ll num) {

    vector<bool> primes(num + 1, true);
    primes[0] = primes[1] = false;

    for (ll i = 2; i * i <= num; i++) {
        for (ll j = i * 2; primes[i] && j <= num; j += i) {
            primes[j] = false;
        }
    }
    return primes;
}

ll Count_Primes_InRange_Sieve(ll num) {
    vector<bool> primes(num + 1);
    primes = Prime_Range_Sieve(num);
    ll counter = 0;
    for (bool i : primes) counter += i;
    return counter;
}

vector<ll> get_primes(ll num) {

    vector<bool> primes_check(num + 1);
    primes_check = Prime_Range_Sieve(num);
    vector<ll> primes;
    for (ll i = 2; i < size(primes_check); i++) {
        if (primes_check[i]) primes.push_back(i);
    }
    return primes;
}


////////////////////////////////  Prime_Factorization  //////////////////////////////////////////


vector<ll> Prime_Factorization(ll num) {
    vector<ll> factors;
    if (num < 2) return factors;
    while (!(num % 2)) {
        factors.push_back(2);
        num /= 2;
    }
    for (ll i = 3; i * i <= num; i += 2) {
        while (!(num % i)) {
            factors.push_back(i);
            num /= i;
        }
    }
    if(num > 1) factors.push_back(num);
    return factors;
}

////////////////////////////////  Linear_Sieve  //////////////////////////////////////////

const int N = 1e6 + 10;
vector<bool> composite(N+1, false);
vector<int>primes;
void Linear_Sieve() {
    composite[0] = composite[1] = 1;
    for (int i = 2; i <= N; ++i)
    {
        if (!composite[i])
        {
            primes.push_back(i);
        }
        for (int j = 0; j < (int)primes.size() && i * primes[j] <= N; ++j)
        {
            composite[i * primes[j]] = 1;
            if (i % primes[j] == 0) break;

        }
    }
}

////////////////////////////////  Segmented_Sieve  //////////////////////////////////////////

vector<char> Segmented_Sieve(ll L, ll R) {
    ll lim = sqrt(R);
    vector<char> mark(lim + 1, false);
    vector<ll> primes;
    for (ll i = 2; i <= lim; ++i) {
        if (!mark[i]) {
            primes.emplace_back(i);
            for (ll j = i * i; j <= lim; j += i)
                mark[j] = true;
        }
    }
    vector<char> isPrime(R - L + 1, true);
    for (ll i : primes)
        for (ll j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)
            isPrime[j - L] = false;
    if (L == 1) isPrime[0] = false;
    return isPrime;
}

vector<char> segmentedSieveNoPreGen(ll L, ll R) {
    vector<char> isPrime(R - L + 1, true);
    ll lim = sqrt(R);
    for (ll i = 2; i <= lim; ++i)
        for (ll j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)
            isPrime[j - L] = false;
    if (L == 1)
        isPrime[0] = false;
    return isPrime;
}

////////////////////////////////  GCD  //////////////////////////////////////////

ll GCD(ll a, ll b) { // O(log2(max(a, b))) - iterative - less memory
    while (b) {
        ll temp = a;
        a = b;
        b = temp % b;
    }
    return a;
}

ll GCD(ll a, ll b) { // O(log2(max(a, b))) - recursive - more memory
    if (!b) return a;
    return gcd(b, a % b);
}

////////////////////////////////  LCM  //////////////////////////////////////////

ll LCM(ll a, ll b) {
    return a * (b / gcd(a, b));
}

///////////////////////////////// Mod //////////////////////////////////////////
ll add_mod(ll a, ll b, ll m) {
    return ((a % m) + (b % m)) % m;
}

ll mul_mod(ll a, ll b, ll p) {
    ll res = 0;
    ll y = a % p;
    while (b) {
        if (b & 1) res = (res + y) % p;
        b /= 2;
        y = (y * 2) % p;
    }
    return res % p;
}

ll sub_mod(ll a, ll b, ll m) {
    return ((a % m) - (b % m) + m) % m;
}

ll div_mod(ll a, ll b, ll m) {
    return mul_mod(a, (modInverse(b, m)), m);
}

//////////////////////////////// FastPower//////////////////////////////////////

const int MOD = 1e9 + 7;
int FastPower(int base , int power) {
    // base case
    if(power == 0) {
        return 1;
    }

    int sq = FastPower(base, power/2);
    sq = ( (sq % MOD) * (sq % MOD) ) % MOD;

    if(power&1) {
        sq = ( (sq % MOD) * (base % MOD) ) % MOD;
    }

    return sq;
}