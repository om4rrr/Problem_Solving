#include <bits/stdc++.h>

using namespace std;

void fileIO(void) {

#ifndef ONLINE_JUDGE

    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

#endif

}

void fastIO(void) {

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

}

int dx_all[8] = { 1, 0, -1, 0, 1, 1, -1, -1 },
        dy_all[8] = { 0, 1, 0, -1, -1, 1, -1, 1 };
int dx[4] = { 1, 0, -1, 0 },
        dy[4] = { 0, 1, 0, -1 };

typedef long long ll;
#define int ll
#define all(x) x.begin(),x.end()

const int N = 200 + 5;
int n, tc = 0;
vector<int>v(n), ans;
int memo[N][N];
int vis[N][N];

int LIS(int idx, int last_idx) {

    if(idx == n) return 0;

    int &ret = memo[idx][last_idx + 1];
    if(vis[idx][last_idx + 1] == tc) return ret;
    vis[idx][last_idx + 1] = tc;

    int ch1 = LIS(idx + 1, last_idx); // leave
    int ch2 = 0;
    if(v[idx] > v[last_idx] || last_idx == -1){
        ch2 = 1 + LIS(idx + 1, idx); // take
    }
    return ret = max(ch1, ch2);
}

void buildPath(int idx, int last_idx) {

    if(idx == n) return;

    int ret = memo[idx][last_idx + 1];

    int ch1 = LIS(idx + 1, last_idx); // leave
    int ch2 = 0;
    if(v[idx] > v[last_idx] || last_idx == -1){
        ch2 = 1 + LIS(idx + 1, idx); // take
    }

    if(ret == ch1){
        buildPath(idx + 1, last_idx);
    }
    else if(ret == ch2){
        ans.push_back(v[idx]);
        buildPath(idx + 1, idx);
    }
    return;
}



void solve(int t) {

    while(cin >> n && n) {
    tc++;
    v.resize(n);
    for (int i = 0; i < n; ++i) {
        cin >> v[i];
    }
    cout << LIS(0, -1) << ' ';
    ans.clear();
    buildPath(0, -1);
    for (auto i: ans) cout << i << ' ';
    cout << '\n';
    }
}

signed main() {
    fastIO(); fileIO();
    int tests = 1, t = 1; //cin>>tests;
    while(tests--) {
        //tc++;
        solve(t);
        t++;
    }
    return 0;
}
